/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "pluma.io/api/operator/v1alpha1"
)

// HelmAppLister helps list HelmApps.
// All objects returned here must be treated as read-only.
type HelmAppLister interface {
	// List lists all HelmApps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HelmApp, err error)
	// HelmApps returns an object that can list and get HelmApps.
	HelmApps(namespace string) HelmAppNamespaceLister
	HelmAppListerExpansion
}

// helmAppLister implements the HelmAppLister interface.
type helmAppLister struct {
	indexer cache.Indexer
}

// NewHelmAppLister returns a new HelmAppLister.
func NewHelmAppLister(indexer cache.Indexer) HelmAppLister {
	return &helmAppLister{indexer: indexer}
}

// List lists all HelmApps in the indexer.
func (s *helmAppLister) List(selector labels.Selector) (ret []*v1alpha1.HelmApp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HelmApp))
	})
	return ret, err
}

// HelmApps returns an object that can list and get HelmApps.
func (s *helmAppLister) HelmApps(namespace string) HelmAppNamespaceLister {
	return helmAppNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelmAppNamespaceLister helps list and get HelmApps.
// All objects returned here must be treated as read-only.
type HelmAppNamespaceLister interface {
	// List lists all HelmApps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HelmApp, err error)
	// Get retrieves the HelmApp from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HelmApp, error)
	HelmAppNamespaceListerExpansion
}

// helmAppNamespaceLister implements the HelmAppNamespaceLister
// interface.
type helmAppNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelmApps in the indexer for a given namespace.
func (s helmAppNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HelmApp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HelmApp))
	})
	return ret, err
}

// Get retrieves the HelmApp from the indexer for a given namespace and name.
func (s helmAppNamespaceLister) Get(name string) (*v1alpha1.HelmApp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("helmapp"), name)
	}
	return obj.(*v1alpha1.HelmApp), nil
}
